name: Lint

on: pull_request

jobs:
  echo-changed-files:
    name: Echo changed files
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      
      - name: Install Node.js dependencies
        run: npm ci

      - name: Branch Name
        run: |
          echo Base branch ${{ github.base_ref }}
          echo Source branch ${{ github.head_ref }}
      
      - name: list files
        id: changed_files
        run: |
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
          FILES=($(curl -s -X GET -G $URL | jq -r '.[] | .filename'))
          echo "initial array ${FILES[*]}"
          git status
          echo "next command"
          git branch -r
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRTUXB origin/${{ github.base_ref }} origin/${{ github.head_ref }} | grep  -E '(.js$|.ts$|.tsx$)')
          echo "git cmd ${CHANGED_FILES}"
          for index in "${!FILES[@]}" ;
            do [[ ${FILES[$index]} = !(*.js|*.jsx|*.ts|*.tsx) ]] && unset -v 'FILES[$index]' ;
          done
          FILES=("${FILES[@]}")
          echo "updated array ${FILES[*]}"
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "no script file changed!!"
            echo "::set-output name=files_changed::false"
          else
            echo "::set-output name=files_changed::true"
            echo "::set-output name=file_names::${FILES[*]}"
          fi

      - name: Run lint on changed script files.
        if: steps.changed_files.outputs.files_changed == 'true'
        run: |
          npm run lint ${{steps.changed_files.outputs.file_names}}
