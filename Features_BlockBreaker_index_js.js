/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkplay_ground"] = self["webpackChunkplay_ground"] || []).push([["Features_BlockBreaker_index_js"],{

/***/ "./Features/BlockBreaker/index.js":
/*!****************************************!*\
  !*** ./Features/BlockBreaker/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"template\": () => /* binding */ template,\n/* harmony export */   \"initialize\": () => /* binding */ initialize\n/* harmony export */ });\nconst template = `\r\n    <canvas id=\"block-breaker-canvas\" resize ></canvas>\r\n`;\r\n\r\n/**\r\n * Code to handle the HTML template\r\n * #START\r\n */\r\n\r\ndocument.title = \"Block Breaker\";\r\n\r\n// #END\r\n\r\nfunction initialize() {\r\n    __webpack_require__.e(/*! import() */ \"Features_BlockBreaker_index_css\").then(__webpack_require__.bind(__webpack_require__, /*! ./index.css */ \"./Features/BlockBreaker/index.css\"));\r\n    const scriptPromise = new Promise((resolve, reject) => {\r\n        const script = document.createElement(\"script\");\r\n        script.src =\r\n            \"https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.12.15/paper-full.min.js\";\r\n        script.type = \"text/javascript\";\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n    });\r\n\r\n    scriptPromise.then(() => {\r\n        const canvas = document.getElementById(\"block-breaker-canvas\");\r\n\r\n        paper.install(window);\r\n        paper.setup(canvas);\r\n\r\n        const gameBoard = new Path.Rectangle(90, 10, 460, 400);\r\n        gameBoard.strokeColor = \"black\";\r\n\r\n        const ball = new Path.Circle(new Point(330, 362), 6);\r\n        ball.strokeColor = \"red\";\r\n        ball.fillColor = \"red\";\r\n\r\n        const player = new Path.Rectangle(280, 370, 100, 20);\r\n        player.strokeColor = \"black\";\r\n        player.fillColor = \"blue\";\r\n\r\n        // let score = 0;\r\n\r\n        let hitResult = null;\r\n\r\n        const blocks = [\r\n            new Path.Rectangle(100, 20, 100, 20),\r\n            new Path.Rectangle(220, 20, 100, 20),\r\n            new Path.Rectangle(330, 20, 100, 20),\r\n            new Path.Rectangle(440, 20, 100, 20),\r\n            new Path.Rectangle(100, 50, 100, 20),\r\n            new Path.Rectangle(220, 50, 100, 20),\r\n            new Path.Rectangle(330, 50, 100, 20),\r\n            new Path.Rectangle(440, 50, 100, 20),\r\n            new Path.Rectangle(100, 80, 100, 20),\r\n            new Path.Rectangle(220, 80, 100, 20),\r\n            new Path.Rectangle(330, 80, 100, 20),\r\n            new Path.Rectangle(440, 80, 100, 20),\r\n        ];\r\n\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            blocks[i].strokeColor = \"black\";\r\n            blocks[i].fillColor = \"purple\";\r\n        }\r\n        const playerTool = new Tool();\r\n\r\n        playerTool.onMouseDown = (event) => {\r\n            hitResult = player.hitTest(event.point, {\r\n                fill: true,\r\n            });\r\n        };\r\n\r\n        playerTool.onMouseDrag = (event) => {\r\n            if (\r\n                event.point.x > 140 &&\r\n                event.point.x < 500 &&\r\n                hitResult &&\r\n                hitResult.item\r\n            )\r\n                hitResult.item.position.x = event.point.x;\r\n        };\r\n\r\n        playerTool.onMouseUp = () => {\r\n            hitResult = null;\r\n        };\r\n\r\n        console.log(\"ball.position\", ball.position);\r\n        let dirX = -1;\r\n        let dirY = -1;\r\n\r\n        function changeDirection(isVertical) {\r\n            if (dirX === -1 && dirY === -1) {\r\n                if (isVertical) {\r\n                    dirX = 1;\r\n                } else {\r\n                    dirY = 1;\r\n                }\r\n            } else if (dirX === -1 && dirY === 1) {\r\n                if (isVertical) {\r\n                    dirX = 1;\r\n                } else {\r\n                    dirY = -1;\r\n                }\r\n            } else if (dirX === 1 && dirY === -1) {\r\n                if (isVertical) {\r\n                    dirX = -1;\r\n                } else {\r\n                    dirY = 1;\r\n                }\r\n            } else if (dirX === 1 && dirY === 1) {\r\n                if (isVertical) {\r\n                    dirX = -1;\r\n                } else {\r\n                    dirY = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        view.onFrame = () => {\r\n            ball.position.x = ball.position.x + dirX;\r\n            ball.position.y = ball.position.y + dirY;\r\n            const hitBoard = gameBoard.hitTest(ball.position);\r\n            let hitBlocks = null;\r\n            for (let a = 0; a < blocks.length; a++) {\r\n                hitBlocks = blocks[a].hitTest(ball.position);\r\n                if (hitBlocks) {\r\n                    blocks[a].remove();\r\n                    blocks.splice(a, 1);\r\n                    // score++;\r\n                    break;\r\n                }\r\n            }\r\n            if (!blocks.length) {\r\n                // score = \"WINNER!\";\r\n                view.pause();\r\n            }\r\n            if (hitBoard && hitBoard.point.y > 370) {\r\n                // score = \"LOSER!\";\r\n                view.pause();\r\n            }\r\n            const hitPlayer = player.hitTest(ball.position);\r\n            const hitSomething = hitBoard || hitBlocks || hitPlayer;\r\n            if (hitSomething) {\r\n                changeDirection(hitSomething.location.curve.isVertical());\r\n            }\r\n        };\r\n    });\r\n}\r\n\n\n//# sourceURL=webpack://play-ground/./Features/BlockBreaker/index.js?");

/***/ })

}]);